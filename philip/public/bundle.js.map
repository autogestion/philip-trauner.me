{"version":3,"file":"bundle.js","sources":["../node_modules/svelte/internal.mjs","../src/PostBody.svelte","../src/Post.svelte","../src/TimeLine.svelte","../src/Tab.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction validate_store(store, name) {\n    if (!store || typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(component, store, callback) {\n    const unsub = store.subscribe(callback);\n    component.$$.on_destroy.push(unsub.unsubscribe\n        ? () => unsub.unsubscribe()\n        : unsub);\n}\nfunction create_slot(definition, ctx, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.ctx, definition[1](fn ? fn(ctx) : {})))\n        : ctx.$$scope.ctx;\n}\nfunction get_slot_changes(definition, ctx, changed, fn) {\n    return definition[1]\n        ? assign({}, assign(ctx.$$scope.changed || {}, definition[1](fn ? fn(changed) : {})))\n        : ctx.$$scope.changed || {};\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? requestAnimationFrame : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nlet running = false;\nfunction run_tasks() {\n    tasks.forEach(task => {\n        if (!task[0](now())) {\n            tasks.delete(task);\n            task[1]();\n        }\n    });\n    running = tasks.size > 0;\n    if (running)\n        raf(run_tasks);\n}\nfunction clear_loops() {\n    // for testing...\n    tasks.forEach(task => tasks.delete(task));\n    running = false;\n}\nfunction loop(fn) {\n    let task;\n    if (!running) {\n        running = true;\n        raf(run_tasks);\n    }\n    return {\n        promise: new Promise(fulfil => {\n            tasks.add(task = [fn, fulfil]);\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction detach_between(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        before.parentNode.removeChild(before.nextSibling);\n    }\n}\nfunction detach_before(after) {\n    while (after.previousSibling) {\n        after.parentNode.removeChild(after.previousSibling);\n    }\n}\nfunction detach_after(before) {\n    while (before.nextSibling) {\n        before.parentNode.removeChild(before.nextSibling);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    for (const key in attributes) {\n        if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key in node) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group) {\n    const value = [];\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.push(group[i].__value);\n    }\n    return value;\n}\nfunction to_number(value) {\n    return value === '' ? undefined : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction claim_element(nodes, name, attributes, svg) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeName === name) {\n            for (let j = 0; j < node.attributes.length; j += 1) {\n                const attribute = node.attributes[j];\n                if (!attributes[attribute.name])\n                    node.removeAttribute(attribute.name);\n            }\n            return nodes.splice(i, 1)[0]; // TODO strip unwanted attributes\n        }\n    }\n    return svg ? svg_element(name) : element(name);\n}\nfunction claim_text(nodes, data) {\n    for (let i = 0; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 3) {\n            node.data = data;\n            return nodes.splice(i, 1)[0];\n        }\n    }\n    return text(data);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data !== data)\n        text.data = data;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value) {\n    node.style.setProperty(key, value);\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\nfunction add_resize_listener(element, fn) {\n    if (getComputedStyle(element).position === 'static') {\n        element.style.position = 'relative';\n    }\n    const object = document.createElement('object');\n    object.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; pointer-events: none; z-index: -1;');\n    object.type = 'text/html';\n    let win;\n    object.onload = () => {\n        win = object.contentDocument.defaultView;\n        win.addEventListener('resize', fn);\n    };\n    if (/Trident/.test(navigator.userAgent)) {\n        element.appendChild(object);\n        object.data = 'about:blank';\n    }\n    else {\n        object.data = 'about:blank';\n        element.appendChild(object);\n    }\n    return {\n        cancel: () => {\n            win && win.removeEventListener && win.removeEventListener('resize', fn);\n            element.removeChild(object);\n        }\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, false, false, detail);\n    return e;\n}\n\nlet stylesheet;\nlet active = 0;\nlet current_rules = {};\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    if (!current_rules[name]) {\n        if (!stylesheet) {\n            const style = element('style');\n            document.head.appendChild(style);\n            stylesheet = style.sheet;\n        }\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ``}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    node.style.animation = (node.style.animation || '')\n        .split(', ')\n        .filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    )\n        .join(', ');\n    if (name && !--active)\n        clear_rules();\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        let i = stylesheet.cssRules.length;\n        while (i--)\n            stylesheet.deleteRule(i);\n        current_rules = {};\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, start: start_time = now() + delay, end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    const css_text = node.style.cssText;\n    function start() {\n        if (css) {\n            if (delay)\n                node.style.cssText = css_text; // TODO create delayed animation instead?\n            name = create_rule(node, 0, 1, duration, 0, easing, css);\n        }\n        started = true;\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now$$1 => {\n        if (!started && now$$1 >= start_time) {\n            start();\n        }\n        if (started && now$$1 >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now$$1 - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    if (delay) {\n        if (css)\n            node.style.cssText += css(0, 1);\n    }\n    else {\n        start();\n    }\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        const b = node.getBoundingClientRect();\n        if (a.left !== b.left || a.top !== b.top) {\n            const style = getComputedStyle(node);\n            const transform = style.transform === 'none' ? '' : style.transform;\n            node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n        }\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error(`Function called outside component initialization`);\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_render.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_render.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = current_component;\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        callbacks.slice().forEach(fn => fn(event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_binding_callback(fn) {\n    binding_callbacks.push(fn);\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nfunction flush() {\n    const seen_callbacks = new Set();\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        while (dirty_components.length) {\n            const component = dirty_components.shift();\n            set_current_component(component);\n            update(component.$$);\n        }\n        while (binding_callbacks.length)\n            binding_callbacks.shift()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        while (render_callbacks.length) {\n            const callback = render_callbacks.pop();\n            if (!seen_callbacks.has(callback)) {\n                callback();\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n            }\n        }\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n}\nfunction update($$) {\n    if ($$.fragment) {\n        $$.update($$.dirty);\n        run_all($$.before_render);\n        $$.fragment.p($$.dirty, $$.ctx);\n        $$.dirty = null;\n        $$.after_render.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nlet outros;\nfunction group_outros() {\n    outros = {\n        remaining: 0,\n        callbacks: []\n    };\n}\nfunction check_outros() {\n    if (!outros.remaining) {\n        run_all(outros.callbacks);\n    }\n}\nfunction on_outro(callback) {\n    outros.callbacks.push(callback);\n}\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick$$1(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        task = loop(now$$1 => {\n            if (running) {\n                if (now$$1 >= end_time) {\n                    tick$$1(1, 0);\n                    cleanup();\n                    return running = false;\n                }\n                if (now$$1 >= start_time) {\n                    const t = easing((now$$1 - start_time) / duration);\n                    tick$$1(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            delete_rule(node);\n            if (typeof config === 'function') {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.remaining += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        loop(now$$1 => {\n            if (running) {\n                if (now$$1 >= end_time) {\n                    tick$$1(0, 1);\n                    if (!--group.remaining) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.callbacks);\n                    }\n                    return false;\n                }\n                if (now$$1 >= start_time) {\n                    const t = easing((now$$1 - start_time) / duration);\n                    tick$$1(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (typeof config === 'function') {\n        wait().then(() => {\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = program.b - t;\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick: tick$$1 = noop, css } = config;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.remaining += 1;\n        }\n        if (running_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick$$1(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now$$1 => {\n                if (pending_program && now$$1 > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now$$1 >= running_program.end) {\n                        tick$$1(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.remaining)\n                                    run_all(running_program.group.callbacks);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now$$1 >= running_program.start) {\n                        const p = now$$1 - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick$$1(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (typeof config === 'function') {\n                wait().then(() => {\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = key && { [key]: value };\n        const child_ctx = assign(assign({}, info.ctx), info.resolved);\n        const block = type && (info.current = type)(child_ctx);\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        on_outro(() => {\n                            block.d(1);\n                            info.blocks[i] = null;\n                        });\n                        block.o(1);\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            if (block.i)\n                block.i(1);\n            block.m(info.mount(), info.anchor);\n            flush();\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n    }\n    if (is_promise(promise)) {\n        promise.then(value => {\n            update(info.then, 1, info.value, value);\n        }, error => {\n            update(info.catch, 2, info.error, error);\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = { [info.value]: promise };\n    }\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    on_outro(() => {\n        destroy_block(block, lookup);\n    });\n    block.o(1);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, changed, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(changed, child_ctx);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        if (block.i)\n            block.i(1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction measure(blocks) {\n    const rects = {};\n    let i = blocks.length;\n    while (i--)\n        rects[blocks[i].key] = blocks[i].node.getBoundingClientRect();\n    return rects;\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args) {\n    const attributes = Object.assign({}, ...args);\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === undefined)\n            return;\n        if (value === true)\n            str += \" \" + name;\n        const escaped = String(value)\n            .replace(/\"/g, '&#34;')\n            .replace(/'/g, '&#39;');\n        str += \" \" + name + \"=\" + JSON.stringify(escaped);\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(parent_component ? parent_component.$$.context : []),\n            // these will be immediately discarded\n            on_mount: [],\n            before_render: [],\n            after_render: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, options = {}) => {\n            on_destroy = [];\n            const result = { head: '', css: new Set() };\n            const html = $$render(result, props, {}, options);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.head\n            };\n        },\n        $$render\n    };\n}\nfunction get_store_value(store) {\n    let value;\n    store.subscribe(_ => value = _)();\n    return value;\n}\n\nfunction bind(component, name, callback) {\n    if (component.$$.props.indexOf(name) === -1)\n        return;\n    component.$$.bound[name] = callback;\n    callback(component.$$.ctx[name]);\n}\nfunction mount_component(component, target, anchor) {\n    const { fragment, on_mount, on_destroy, after_render } = component.$$;\n    fragment.m(target, anchor);\n    // onMount happens after the initial afterUpdate. Because\n    // afterUpdate callbacks happen in reverse order (inner first)\n    // we schedule onMount callbacks before afterUpdate callbacks\n    add_render_callback(() => {\n        const new_on_destroy = on_mount.map(run).filter(is_function);\n        if (on_destroy) {\n            on_destroy.push(...new_on_destroy);\n        }\n        else {\n            // Edge case - component was destroyed immediately,\n            // most likely as a result of a binding initialising\n            run_all(new_on_destroy);\n        }\n        component.$$.on_mount = [];\n    });\n    after_render.forEach(add_render_callback);\n}\nfunction destroy(component, detaching) {\n    if (component.$$) {\n        run_all(component.$$.on_destroy);\n        component.$$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        component.$$.on_destroy = component.$$.fragment = null;\n        component.$$.ctx = {};\n    }\n}\nfunction make_dirty(component, key) {\n    if (!component.$$.dirty) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty = blank_object();\n    }\n    component.$$.dirty[key] = true;\n}\nfunction init(component, options, instance, create_fragment, not_equal$$1, prop_names) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const props = options.props || {};\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props: prop_names,\n        update: noop,\n        not_equal: not_equal$$1,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        before_render: [],\n        after_render: [],\n        context: new Map(parent_component ? parent_component.$$.context : []),\n        // everything else\n        callbacks: blank_object(),\n        dirty: null\n    };\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, props, (key, value) => {\n            if ($$.ctx && not_equal$$1($$.ctx[key], $$.ctx[key] = value)) {\n                if ($$.bound[key])\n                    $$.bound[key](value);\n                if (ready)\n                    make_dirty(component, key);\n            }\n        })\n        : props;\n    $$.update();\n    ready = true;\n    run_all($$.before_render);\n    $$.fragment = create_fragment($$.ctx);\n    if (options.target) {\n        if (options.hydrate) {\n            $$.fragment.l(children(options.target));\n        }\n        else {\n            $$.fragment.c();\n        }\n        if (options.intro && component.$$.fragment.i)\n            component.$$.fragment.i();\n        mount_component(component, options.target, options.anchor);\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement !== 'undefined') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr$$1, oldValue, newValue) {\n            this[attr$$1] = newValue;\n        }\n        $destroy() {\n            destroy(this, true);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set() {\n            // overridden by instance, if it has props\n        }\n    };\n}\nclass SvelteComponent {\n    $destroy() {\n        destroy(this, true);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set() {\n        // overridden by instance, if it has props\n    }\n}\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(`'target' is a required option`);\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn(`Component was already destroyed`); // eslint-disable-line no-console\n        };\n    }\n}\n\nexport { create_animation, fix_position, handle_promise, append, insert, detach, detach_between, detach_before, detach_after, destroy_each, element, object_without_properties, svg_element, text, space, empty, listen, prevent_default, stop_propagation, attr, set_attributes, set_custom_element_data, xlink_attr, get_binding_group_value, to_number, time_ranges_to_array, children, claim_element, claim_text, set_data, set_input_type, set_style, select_option, select_options, select_value, select_multiple_value, add_resize_listener, toggle_class, custom_event, destroy_block, outro_and_destroy_block, fix_and_outro_and_destroy_block, update_keyed_each, measure, current_component, set_current_component, beforeUpdate, onMount, afterUpdate, onDestroy, createEventDispatcher, setContext, getContext, bubble, clear_loops, loop, dirty_components, intros, schedule_update, tick, add_binding_callback, add_render_callback, add_flush_callback, flush, get_spread_update, invalid_attribute_name_character, spread, escaped, escape, each, missing_component, validate_component, debug, create_ssr_component, get_store_value, group_outros, check_outros, on_outro, create_in_transition, create_out_transition, create_bidirectional_transition, noop, identity, assign, is_promise, add_location, run, blank_object, run_all, is_function, safe_not_equal, not_equal, validate_store, subscribe, create_slot, get_slot_context, get_slot_changes, exclude_internal_props, now, raf, set_now, set_raf, bind, mount_component, init, SvelteElement, SvelteComponent, SvelteComponentDev };\n","\n<script>\n\texport let post;\n</script>\n\n{#if typeof post === 'string'}\n<p>{@html post }</p>\n\n{:else}\n<div class=\"metadata\">\n    <a href=\"{post.id}\">{post.type}</a> by user <a href=\"{ post.attributedTo }\">{ post.attributedTo.split('/').pop() }</a>\n    <span class=\"metadata-seperator\">·</span>\n    <span>{ post.published.replace(\"T\", \" \").replace(\"Z\", \" \")}</span>\n</div>\n<div class=\"tags\">\n{#each post.tag as tag}\n    <a class=\"tag\" href=\"{ tag.href }\">{ tag.name }</a>\n{/each}\n</div>\n\n<p>{@html post.content }</p>\n{/if}\n\n","\n<script>\n\texport let post;\n\timport PostBody from \"./PostBody.svelte\"\n\n\tlet fpost;\n\tlet post_object;\n\tlet fetched_post = false;\n\tif ([\"Announce\", \"Like\"].includes(post.type)) {\n\t    if (pubgate_instance == false) {\n            fpost = fetch(post.object, { headers: {\n                \"Accept\": \"application/activity+json\"\n            }}).then(d => d.json());\n            post_object = fpost => fpost.object;\n\t    } else {\n\t        post_object = post.object\n\t    }\n\n\t    fetched_post = true\n    }\n</script>\n\n<style>\n    .reaction {\n        margin-left: 30px;\n    }\n\n</style>\n\n{#if fetched_post == false}\n<li class=\"post\">\n    <h2 id=\"\"> . </h2>\n    <PostBody post={post.object} />\n</li>\n\n{:else}\n<li class=\"post\">\n    <div class=\"metadata\">\n        <h2 id=\"\"> . </h2>\n        <a href=\"{post.id}\">{post.type}</a> by user <a href=\"{ post.actor }\">{ post.actor.split('/').slice(-1)[0] }</a>\n        <span class=\"metadata-seperator\">·</span>\n\n        {#if post.published }\n        <span>{ post.published.replace(\"T\", \" \").replace(\"Z\", \" \") }</span>\n        {/if}\n    </div>\n    <div class=\"reaction\">\n        <PostBody post={post_object} />\n    </div>\n</li>\n{/if}\n","<script>\n    export let active_tab;\n    export let session;\n\timport Post from \"./Post.svelte\"\n\n\tlet pgi = pubgate_instance;\n\n\tconst fetchCollection = function(path, session={}) {\n\t    let headers_set = {\n            \"Accept\": \"application/activity+json\",\n        };\n\t    if (session.user) {\n            headers_set['Authorization'] = \"Bearer \" + session.token\n\t    }\n\t    return fetch(path, { headers: headers_set})\n\t        .then(d => d.json())\n\t        .then(d => d.first.orderedItems);\n\t};\n\n\tconst getTimeline = function(tab, session) {\n        switch (tab) {\n          case 'local':\n            return pgi ? fetchCollection(base_url + \"/timeline/local?cached=1\"): [];\n          case 'federated':\n            return pgi ? fetchCollection(base_url + \"/timeline/federated?cached=1\"): [];\n          case 'inbox':\n            return pgi ? fetchCollection(session.user.inbox + \"?cached=1\", session):\n                fetchCollection(session.user.inbox, session);\n          case 'profile':\n            return pgi ? fetchCollection(session.user.outbox + \"?cached=1\"):\n                fetchCollection(session.user.outbox);\n          default:\n            return []\n        }\n\t};\n    $: posts = getTimeline(active_tab, session)\n\n\n</script>\n\n{#await posts then value}\n<ul class=\"post-list\">\n    {#each value as post}\n\n        <Post post={post} />\n\n    {/each}\n</ul>\n{/await}","<script>\n    import { createEventDispatcher } from \"svelte\";\n    const dispatch = createEventDispatcher();\n\n    export let active_tab;\n    export let session;\n    import TimeLine from \"./TimeLine.svelte\"\n\n    let username = '';\n    let password = '';\n    async function login(event) {\n        const profile = await fetch(base_url + \"/@\" + username, { headers: {\n            \"Accept\": \"application/activity+json\"\n        }}).then(d => d.json());\n\n        const token = await fetch(profile.endpoints.oauthTokenEndpoint, {\n            method: 'POST',\n            body: JSON.stringify({username: username, password:password})\n        }).then(d => d.json());\n\n        if (token.access_token) {\n            $: session.user = profile;\n            $: session.token = token.access_token;\n        }\n        dispatch(\"updatesession\", session);\n    }\n\n    async function logout(event) {\n        $: session = {};\n        dispatch(\"updatesession\", session);\n    }\n\n</script>\n\n{#if active_tab == 'profile'}\n    {#if session.user }\n         <button class=\"btn btn-sm\" on:click={logout}>Logout</button>\n        <TimeLine active_tab={active_tab}\n                  session={session}/>\n    {:else}\n        <form on:submit|preventDefault={login}>\n            <fieldset class=\"form-group\">\n                <input class=\"form-control form-control-lg\" type=\"username\" placeholder=\"Username\" bind:value={username}>\n            </fieldset>\n            <fieldset class=\"form-group\">\n                <input class=\"form-control form-control-lg\" type=\"password\" placeholder=\"Password\" bind:value={password}>\n            </fieldset>\n            <button class=\"btn btn-lg btn-primary pull-xs-right\" type=\"submit\" disabled='{!username || !password}'>\n                Sign in\n            </button>\n        </form>\n    {/if}\n\n\n{:else}\n        <TimeLine active_tab={active_tab}\n                  session={session}/>\n{/if}","<script>\n\timport Tab from \"./Tab.svelte\";\n\tlet session = {};\n\tlet active_tab;\n    let pgi = pubgate_instance;\n\n    if (pgi) {\n        active_tab = 'local'\n    } else {\n        active_tab = 'about'\n    }\n\n    function selectTab (event) {\n        event.preventDefault();\n        active_tab = this.href.split('#')[1];\n        Array.prototype.forEach.call(this.parentNode.parentNode.children, (el, i) => {\n            if (el.firstChild.href.split('#')[1] !== active_tab) {\n                el.firstChild.classList.remove('header-selected')\n            }\n        });\n        this.classList.add('header-selected');\n    }\n\n    const updateSession = e => {\n        $: session = e.detail;\n    };\n\n</script>\n\n<style>\n</style>\n\n<header>\n\t<ul>\n\t    {#if pgi == true }\n\t\t<li><a href=\"#local\" class=\"header-selected\" on:click=\"{selectTab}\">Local Timeline</a></li>\n\t\t<li><a href=\"#federated\" on:click=\"{selectTab}\">Federated Timeline</a></li>\n\t\t{/if}\n\t\t{#if session.user }\n\t\t<li><a href=\"#inbox\" on:click=\"{selectTab}\">Inbox</a></li>\n\t\t<li><a href=\"#create\" on:click=\"{selectTab}\">Create</a></li>\n\t\t{/if}\n\t\t<li><a href=\"#profile\" on:click=\"{selectTab}\">{#if session.user }Profile{:else}Login{/if}</a></li>\n\t\t<li><a href=\"#about\" on:click=\"{selectTab}\">About</a></li>\n\t</ul>\n</header>\n\n<div class=\"content\">\n    <Tab active_tab={active_tab}\n         session={session}\n         on:updatesession={updateSession}/>\n</div>\n\n<hr class=\"separator\" />\n<footer class=\"content\">\n    <div class=\"left-column\">\n        <h2>PubGate-Philip</h2>\n        <p>Gotta<br>go<br>Fast</p>\n    </div>\n    <div class=\"right-column\">\n        <h2>Contact</h2>\n        <p></p>\n    </div>\n</footer>\n\n","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.body,\n\tprops: {}\n});\n\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","i","length","d","element","name","document","createElement","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","attr","attribute","value","removeAttribute","setAttribute","set_data","current_component","set_current_component","component","createEventDispatcher","type","detail","callbacks","$$","e","createEvent","initCustomEvent","custom_event","slice","call","dirty_components","resolved_promise","Promise","resolve","update_scheduled","binding_callbacks","render_callbacks","flush_callbacks","add_render_callback","push","flush","seen_callbacks","Set","shift","update","callback","pop","has","add","fragment","dirty","before_render","p","ctx","after_render","outros","group_outros","remaining","check_outros","on_outro","handle_promise","promise","info","token","index","key","resolved","[object Object]","child_ctx","block","current","blocks","o","c","m","mount","then","error","catch","pending","mount_component","on_mount","on_destroy","new_on_destroy","map","filter","make_dirty","init","instance","create_fragment","not_equal$$1","prop_names","parent_component","props","not_equal","bound","context","Map","ready","hydrate","l","Array","from","childNodes","intro","SvelteComponent","this","$destroy","indexOf","splice","post","attributedTo","split","published","replace","content","tag","id","href","actor","post_object","object","fetched_post","fpost","includes","pubgate_instance","fetch","headers","Accept","json","posts","active_tab","session","pgi","fetchCollection","path","headers_set","user","first","orderedItems","tab","base_url","inbox","outbox","getTimeline","username","password","login","preventDefault","logout","dispatch","async","profile","endpoints","oauthTokenEndpoint","method","body","JSON","stringify","access_token","selectTab","updateSession","prototype","children","el","firstChild","classList","remove"],"mappings":"gCAAA,SAASA,KAET,SAASC,EAAOC,EAAKC,GACjB,IAAK,MAAMC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,EAUX,SAASG,EAAIC,GACT,OAAOA,IAEX,SAASC,IACL,OAAOC,OAAOC,OAAO,MAEzB,SAASC,EAAQC,GACbA,EAAIC,QAAQP,GAEhB,SAASQ,EAAYC,GACjB,MAAwB,mBAAVA,EAElB,SAASC,EAAeC,EAAGC,GACvB,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAkB,iBAANA,GAAgC,mBAANA,EAsFhF,SAASE,EAAOC,EAAQC,GACpBD,EAAOE,YAAYD,GAEvB,SAASE,EAAOH,EAAQC,EAAMG,GAC1BJ,EAAOK,aAAaJ,EAAMG,GAAU,MAExC,SAASE,EAAOL,GACZA,EAAKM,WAAWC,YAAYP,GAiBhC,SAASQ,EAAaC,EAAYC,GAC9B,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAWG,OAAQD,GAAK,EACpCF,EAAWE,IACXF,EAAWE,GAAGE,EAAEH,GAG5B,SAASI,EAAQC,GACb,OAAOC,SAASC,cAAcF,GAiBlC,SAASG,EAAKC,GACV,OAAOH,SAASI,eAAeD,GAEnC,SAASE,IACL,OAAOH,EAAK,KAEhB,SAASI,IACL,OAAOJ,EAAK,IAEhB,SAASK,EAAOvB,EAAMwB,EAAOC,EAASC,GAElC,OADA1B,EAAK2B,iBAAiBH,EAAOC,EAASC,GAC/B,IAAM1B,EAAK4B,oBAAoBJ,EAAOC,EAASC,GAgB1D,SAASG,EAAK7B,EAAM8B,EAAWC,GACd,MAATA,EACA/B,EAAKgC,gBAAgBF,GAErB9B,EAAKiC,aAAaH,EAAWC,GAuErC,SAASG,EAAShB,EAAMC,GACpBA,EAAO,GAAKA,EACRD,EAAKC,OAASA,IACdD,EAAKC,KAAOA,GAoMpB,IAAIgB,EACJ,SAASC,EAAsBC,GAC3BF,EAAoBE,EAmBxB,SAASC,IACL,MAAMD,EAAYF,EAClB,MAAO,CAACI,EAAMC,KACV,MAAMC,EAAYJ,EAAUK,GAAGD,UAAUF,GACzC,GAAIE,EAAW,CAGX,MAAMjB,EA/JlB,SAAsBe,EAAMC,GACxB,MAAMG,EAAI3B,SAAS4B,YAAY,eAE/B,OADAD,EAAEE,gBAAgBN,GAAM,GAAO,EAAOC,GAC/BG,EA4JeG,CAAaP,EAAMC,GACjCC,EAAUM,QAAQvD,QAAQN,IACtBA,EAAG8D,KAAKX,EAAWb,OAqBnC,MAAMyB,EAAmB,GAEnBC,EAAmBC,QAAQC,UACjC,IAAIC,GAAmB,EACvB,MAAMC,EAAoB,GACpBC,EAAmB,GACnBC,EAAkB,GAcxB,SAASC,EAAoBvE,GACzBqE,EAAiBG,KAAKxE,GAK1B,SAASyE,IACL,MAAMC,EAAiB,IAAIC,IAC3B,EAAG,CAGC,KAAOZ,EAAiBrC,QAAQ,CAC5B,MAAMyB,EAAYY,EAAiBa,QACnC1B,EAAsBC,GACtB0B,EAAO1B,EAAUK,IAErB,KAAOY,EAAkB1C,QACrB0C,EAAkBQ,OAAlBR,GAIJ,KAAOC,EAAiB3C,QAAQ,CAC5B,MAAMoD,EAAWT,EAAiBU,MAC7BL,EAAeM,IAAIF,KACpBA,IAEAJ,EAAeO,IAAIH,WAGtBf,EAAiBrC,QAC1B,KAAO4C,EAAgB5C,QACnB4C,EAAgBS,KAAhBT,GAEJH,GAAmB,EAEvB,SAASU,EAAOrB,GACRA,EAAG0B,WACH1B,EAAGqB,OAAOrB,EAAG2B,OACb/E,EAAQoD,EAAG4B,eACX5B,EAAG0B,SAASG,EAAE7B,EAAG2B,MAAO3B,EAAG8B,KAC3B9B,EAAG2B,MAAQ,KACX3B,EAAG+B,aAAajF,QAAQiE,IAiBhC,IAAIiB,EACJ,SAASC,IACLD,EAAS,CACLE,UAAW,EACXnC,UAAW,IAGnB,SAASoC,IACAH,EAAOE,WACRtF,EAAQoF,EAAOjC,WAGvB,SAASqC,EAASd,GACdU,EAAOjC,UAAUiB,KAAKM,GA4N1B,SAASe,EAAeC,EAASC,GAC7B,MAAMC,EAAQD,EAAKC,MAAQ,GAC3B,SAASnB,EAAOxB,EAAM4C,EAAOC,EAAKrD,GAC9B,GAAIkD,EAAKC,QAAUA,EACf,OACJD,EAAKI,SAAWD,GAAO,CAAEE,CAACF,GAAMrD,GAChC,MAAMwD,EAAY1G,EAAOA,EAAO,GAAIoG,EAAKT,KAAMS,EAAKI,UAC9CG,EAAQjD,IAAS0C,EAAKQ,QAAUlD,GAAMgD,GACxCN,EAAKO,QACDP,EAAKS,OACLT,EAAKS,OAAOlG,QAAQ,CAACgG,EAAO7E,KACpBA,IAAMwE,GAASK,IACfb,IACAG,EAAS,KACLU,EAAM3E,EAAE,GACRoE,EAAKS,OAAO/E,GAAK,OAErB6E,EAAMG,EAAE,GACRd,OAKRI,EAAKO,MAAM3E,EAAE,GAEjB2E,EAAMI,IACFJ,EAAM7E,GACN6E,EAAM7E,EAAE,GACZ6E,EAAMK,EAAEZ,EAAKa,QAASb,EAAK9E,QAC3BwD,KAEJsB,EAAKO,MAAQA,EACTP,EAAKS,SACLT,EAAKS,OAAOP,GAASK,GAE7B,IAr1BgBzD,EAq1BDiD,IAp1BuB,mBAAfjD,EAAMgE,MA21BzB,GANAf,EAAQe,KAAKhE,IACTgC,EAAOkB,EAAKc,KAAM,EAAGd,EAAKlD,MAAOA,IAClCiE,IACCjC,EAAOkB,EAAKgB,MAAO,EAAGhB,EAAKe,MAAOA,KAGlCf,EAAKQ,UAAYR,EAAKiB,QAEtB,OADAnC,EAAOkB,EAAKiB,QAAS,IACd,MAGV,CACD,GAAIjB,EAAKQ,UAAYR,EAAKc,KAEtB,OADAhC,EAAOkB,EAAKc,KAAM,EAAGd,EAAKlD,MAAOiD,IAC1B,EAEXC,EAAKI,SAAW,CAAEC,CAACL,EAAKlD,OAAQiD,GAt2BxC,IAAoBjD,EAolCpB,SAASoE,EAAgB9D,EAAWtC,EAAQI,GACxC,MAAMiE,SAAEA,EAAQgC,SAAEA,EAAQC,WAAEA,EAAU5B,aAAEA,GAAiBpC,EAAUK,GACnE0B,EAASyB,EAAE9F,EAAQI,GAInBsD,EAAoB,KAChB,MAAM6C,EAAiBF,EAASG,IAAItH,GAAKuH,OAAO/G,GAC5C4G,EACAA,EAAW3C,QAAQ4C,GAKnBhH,EAAQgH,GAEZjE,EAAUK,GAAG0D,SAAW,KAE5B3B,EAAajF,QAAQiE,GAYzB,SAASgD,EAAWpE,EAAW+C,GACtB/C,EAAUK,GAAG2B,QACdpB,EAAiBS,KAAKrB,GAjnBrBgB,IACDA,GAAmB,EACnBH,EAAiB6C,KAAKpC,IAinBtBtB,EAAUK,GAAG2B,MAAQlF,KAEzBkD,EAAUK,GAAG2B,MAAMe,IAAO,EAE9B,SAASsB,EAAKrE,EAAWX,EAASiF,EAAUC,EAAiBC,EAAcC,GACvE,MAAMC,EAAmB5E,EACzBC,EAAsBC,GACtB,MAAM2E,EAAQtF,EAAQsF,OAAS,GACzBtE,EAAKL,EAAUK,GAAK,CACtB0B,SAAU,KACVI,IAAK,KAELwC,MAAOF,EACP/C,OAAQnF,EACRqI,UAAWJ,EACXK,MAAO/H,IAEPiH,SAAU,GACVC,WAAY,GACZ/B,cAAe,GACfG,aAAc,GACd0C,QAAS,IAAIC,IAAIL,EAAmBA,EAAiBrE,GAAGyE,QAAU,IAElE1E,UAAWtD,IACXkF,MAAO,MAEX,IAAIgD,GAAQ,EA16BhB,IAAkBvG,EA26Bd4B,EAAG8B,IAAMmC,EACHA,EAAStE,EAAW2E,EAAO,CAAC5B,EAAKrD,KAC3BW,EAAG8B,KAAOqC,EAAanE,EAAG8B,IAAIY,GAAM1C,EAAG8B,IAAIY,GAAOrD,KAC9CW,EAAGwE,MAAM9B,IACT1C,EAAGwE,MAAM9B,GAAKrD,GACdsF,GACAZ,EAAWpE,EAAW+C,MAGhC4B,EACNtE,EAAGqB,SACHsD,GAAQ,EACR/H,EAAQoD,EAAG4B,eACX5B,EAAG0B,SAAWwC,EAAgBlE,EAAG8B,KAC7B9C,EAAQ3B,SACJ2B,EAAQ4F,QACR5E,EAAG0B,SAASmD,GA37BNzG,EA27BiBY,EAAQ3B,OA17BhCyH,MAAMC,KAAK3G,EAAQ4G,cA67BlBhF,EAAG0B,SAASwB,IAEZlE,EAAQiG,OAAStF,EAAUK,GAAG0B,SAASzD,GACvC0B,EAAUK,GAAG0B,SAASzD,IAC1BwF,EAAgB9D,EAAWX,EAAQ3B,OAAQ2B,EAAQvB,QACnDwD,KAEJvB,EAAsB2E,GAsC1B,MAAMa,EACFtC,WA1GJ,IAAiBjD,EAAW3B,EAAAA,GA2GN,GA3GL2B,EA2GDwF,MA1GEnF,KACVpD,EAAQ+C,EAAUK,GAAG2D,YACrBhE,EAAUK,GAAG0B,SAASvD,EAAEH,GAGxB2B,EAAUK,GAAG2D,WAAahE,EAAUK,GAAG0B,SAAW,KAClD/B,EAAUK,GAAG8B,IAAM,IAqGnBqD,KAAKC,SAAWlJ,EAEpB0G,IAAI/C,EAAMyB,GACN,MAAMvB,EAAaoF,KAAKnF,GAAGD,UAAUF,KAAUsF,KAAKnF,GAAGD,UAAUF,GAAQ,IAEzE,OADAE,EAAUiB,KAAKM,GACR,KACH,MAAMmB,EAAQ1C,EAAUsF,QAAQ/D,IACjB,IAAXmB,GACA1C,EAAUuF,OAAO7C,EAAO,IAGpCG,oIC5tCqB2C,KAAK1F,SAAoD0F,KAAKC,aAAaC,MAAM,KAAKlE,UAEnGgE,KAAKG,UAAUC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,SAQhDJ,KAAKK,YALRL,KAAKM,iBAAV3H,kMAAAA,+CALYqH,KAAKO,cAAwCP,KAAKC,iNAK9DtH,uFALuBqH,KAAK1F,+BAAhB0F,KAAKO,iCAA+DP,KAAKC,aAAaC,MAAM,KAAKlE,gCAApDgE,KAAKC,2CAEpDD,KAAKG,UAAUC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,0BAGnDJ,KAAKM,oBAAV3H,4FAAAA,wBAAAA,SAAAA,wBAKQqH,KAAKK,mJAdLL,oCAAAA,kDAU+BM,IAAIxH,6DAAlBwH,IAAIE,sDAAUF,IAAIxH,+BAAlBwH,IAAIE,0EAXV,mBAATR,6MAHJ,SAAIA,6LCqCiBA,KAAK1F,SAA6C0F,KAAKS,MAAMP,MAAM,KAAKpF,OAAO,GAAG,OAGlGkF,KAAc,uCAKHU,2OARNV,KAAKO,cAAwCP,KAAKS,gSAAvCT,KAAK1F,mCAAhB0F,KAAKO,qCAAwDP,KAAKS,MAAMP,MAAM,KAAKpF,OAAO,GAAG,iCAAhDkF,KAAKS,qBAGvDT,KAAKG,qGAKMO,+KAfJV,KAAKW,iMAALX,KAAKW,0IAWTX,KAAKG,UAAUC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,oFAA9CJ,KAAKG,UAAUC,QAAQ,IAAK,KAAKA,QAAQ,IAAK,0FAdzC,KAAhBQ,2UA3BG,IAGHC,EACAH,QAJOV,KAKPY,GAAe,QACf,CAAC,WAAY,QAAQE,SAASd,EAAK1F,QACX,GAApByG,4BACGF,EAAQG,MAAMhB,EAAKW,OAAQ,CAAEM,QAAS,CAClCC,OAAU,+BACVpD,KAAKlF,GAAKA,EAAEuI,yBAChBT,EAAcG,CAAAA,GAASA,EAAMF,0BAEhCD,EAAcV,EAAKW,yBAGvBC,GAAe,uSCwBT9G,mBAALnB,uIAAAA,8EAAAA,wDAAKmB,sBAALnB,sHAAAA,uDAAAA,qEAAAA,2FAEcqH,+FAAAA,6RAJZoB,8JAAAA,oMAvCG,eAAIC,EAAUC,QACVA,KAGVC,EAAMR,iBAEV,MAAMS,EAAkB,SAASC,EAAMH,EAAQ,IAC3C,IAAII,EAAc,CACXR,OAAU,6BAKjB,OAHII,EAAQK,OACLD,EAA2B,cAAI,UAAYJ,EAAQrE,OAEnD+D,MAAMS,EAAM,CAAER,QAASS,IACzB5D,KAAKlF,GAAKA,EAAEuI,QACZrD,KAAKlF,GAAKA,EAAEgJ,MAAMC,oNAmBrBT,EAhBc,SAASU,EAAKR,GAC3B,OAAQQ,GACN,IAAK,QACH,OAAOP,EAAMC,EAAgBO,SAAW,4BAA6B,GACvE,IAAK,YACH,OAAOR,EAAMC,EAAgBO,SAAW,gCAAiC,GAC3E,IAAK,QACH,OAAaP,EAAND,EAAsBD,EAAQK,KAAKK,MAAQ,YAC9BV,EAAQK,KAAKK,MAD8BV,GAEjE,IAAK,UACH,OAAaE,EAAND,EAAsBD,EAAQK,KAAKM,OAAS,YAC/BX,EAAQK,KAAKM,QACnC,QACE,MAAO,IAGJC,CAAYb,EAAYC,gLCoBTD,qBACHC,6GADGD,oCACHC,2KArBlBA,QAAQK,qWJ4IjB,IAAyB1K,4aIhIkEkL,aAAaC,kGJgI/EnL,IIvIeoL,MJwI7B,SAAU9I,GAGb,OAFAA,EAAM+I,iBAECrL,EAAG8D,KAAK6E,KAAMrG,gDIzIkF4I,wCAGAC,6DAHAD,iCAGAC,8CAEpBD,aAAaC,gHAV1Ef,qBACHC,4HAFmBiB,+FAChBlB,oCACHC,2LAJR,aAAdD,0UAhCD,MAAMmB,EAAWnI,IAEV,eAAIgH,EAAUC,QACVA,KAGPa,EAAW,GACXC,EAAW,qKACfK,eAAqBlJ,GACjB,MAAMmJ,QAAgB1B,MAAMe,SAAW,KAAOI,EAAU,CAAElB,QAAS,CAC/DC,OAAU,+BACVpD,KAAKlF,GAAKA,EAAEuI,QAEVlE,QAAc+D,MAAM0B,EAAQC,UAAUC,mBAAoB,CAC5DC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACb,SAAUA,EAAUC,SAASA,MACpDtE,KAAKlF,GAAKA,EAAEuI,QAEXlE,EAAMgG,eACH3B,EAAQK,KAAOe,iBACfpB,EAAQrE,MAAQA,EAAMgG,6BAE7BT,EAAS,gBAAiBlB,WAG9BmB,eAAsBlJ,eACf+H,EAAU,IACbkB,EAAS,gBAAiBlB,kcCMwB4B,yBACpBA,uRAGJA,yBACCA,uTANlB,KAAP3B,eAIHD,QAAY,mCAIkCA,QAAQK,2DAMxCN,qBACHC,0CACS6B,khBARSD,yBACFA,8MATjB,KAAP3B,6DAIHD,QAAQK,wJAUMN,oCACHC,yMA/CjB,IACID,EADAC,EAAU,GAEPC,EAAMR,gCAGNM,EADAE,EACa,QAEA,uDAGjB,SAAoBhI,GAChBA,EAAM+I,gCACNjB,EAAazB,KAAKY,KAAKN,MAAM,KAAK,IAClCX,MAAM6D,UAAU7L,QAAQwD,KAAK6E,KAAKvH,WAAWA,WAAWgL,SAAU,CAACC,EAAI5K,KAC/D4K,EAAGC,WAAW/C,KAAKN,MAAM,KAAK,KAAOmB,GACrCiC,EAAGC,WAAWC,UAAUC,OAAO,qBAGvC7D,KAAK4D,UAAUtH,IAAI,kCAGDxB,gBACf4G,EAAU5G,EAAEH,iBCtBX,kEAAQ,CACnBzC,OAAQiB,SAAS+J,KACjB/D,MAAO"}