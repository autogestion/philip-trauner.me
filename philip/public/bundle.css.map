{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/TimeLine.svelte",
    "../src/components/Publish.svelte",
    "../src/components/Link.svelte",
    "../src/components/Post.svelte",
    "../src/components/Activity.svelte",
    "../src/components/Post/Content.svelte"
  ],
  "sourcesContent": [
    "<script>\n  export let curRoute;\n  export let session;\n\n  import { fetchCollection } from \"../utils\";\n  import Collection from \"./Collection.svelte\";\n\n  let pgi = pubgate_instance;\n\n  const getTimeline = function(tab, session) {\n    switch (tab) {\n      case \"/local\":\n        return pgi\n          ? fetchCollection(base_url + \"/timeline/local?cached=1\")\n          : [];\n      case \"/federated\":\n        return pgi\n          ? fetchCollection(base_url + \"/timeline/federated?cached=1\")\n          : [];\n      case \"/inbox\":\n        if (!session.user) return [];\n        return pgi\n          ? fetchCollection(session.user.inbox + \"?cached=1\", session, true)\n          : fetchCollection(session.user.inbox, session);\n      case \"/profile\":\n        return pgi\n          ? fetchCollection(session.user.outbox + \"?cached=1\")\n          : fetchCollection(session.user.outbox);\n      default:\n        return [];\n    }\n  };\n\n  $: timeline = getTimeline($curRoute, $session);\n</script>\n\n<style>\n  .navigation {\n  }\n</style>\n\n{#await timeline then collection}\n  <Collection {collection} {session} />\n{/await}\n",
    "<script>\n  import { getCreateObject, getHashTag, getMention } from \"../utils/pubGate\";\n  import { getUserId } from \"../utils\";\n\n  export let reply = null;\n  export let session;\n  export let curRoute;\n\n  let inProgress = false;\n  let content = \"\";\n  let error = \"\";\n\n  const hashTagMatcher = /(^|\\W)(#[^#\\s]+)/gi;\n  const mentionMatcher = /(^|\\W)@([^@\\s]+)(@([^@\\s]+))?/gi;\n\n  const wrapHashTagsWithLink = text =>\n    text.replace(hashTagMatcher, '$1<a href=\"\" rel=\"tag\">$2</a>');\n\n  const getAllHashTags = text => text.match(hashTagMatcher) || [];\n  const getAllMentions = text => [...text.matchAll(mentionMatcher)] || [];\n\n  const wrapLinksWithTags = text =>\n    text.replace(/(https?:\\/\\/([^\\s]+))/gi, '<a href=\"$1\">$2</a>');\n\n  const publish = ev => {\n    ev.preventDefault();\n    inProgress = true;\n\n    const tags = getAllHashTags(content)\n      .map(v => v.trim())\n      .map(getHashTag);\n    content = wrapHashTagsWithLink(wrapLinksWithTags(content));\n\n    // parse and replace mentions\n    const mentions = getAllMentions(content).map(m => {\n      const orig = m[0];\n      const name = m[2];\n      const domain = m[4];\n      const id = getUserId(name, domain);\n      const wrapped = `${m[1]}<span class='h-card'><a href=\"${id}\"' class='u-url mention'>@<span>${name}</span></a></span>`;\n      content = content.replace(orig, wrapped);\n      return getMention(name, id);\n    });\n    let ap_object = getCreateObject(content, tags.concat(mentions));\n    ap_object.cc = mentions.map(m => m.href);\n\n    if (reply) {\n      ap_object.object.inReplyTo = reply.id;\n      ap_object.cc = ap_object.cc.concat(reply.attributedTo);\n    }\n    sendPost(JSON.stringify(ap_object));\n  };\n\n  const sendPost = async body => {\n    try {\n      const headers = { Authorization: \"Bearer \" + $session.token };\n      const req = { method: \"POST\", body, headers };\n      console.log(\"sending\", req);\n      const res = await fetch($session.user.outbox, req).then(d => d.json());\n      console.log(\"response\", res);\n      if (res.error) error = res.error;\n      else if (res.Created !== \"success\")\n        error = \"Failed to create post: \" + JSON.stringify(res);\n    } catch (e) {\n      error = e;\n    }\n\n    inProgress = false;\n    content = \"\";\n    // TODO change route to show post?\n  };\n</script>\n\n<style>\n  textarea {\n    width: 100%;\n  }\n</style>\n\n<form on:submit={publish}>\n\n  <fieldset class=\"form-group\">\n    <textarea\n      class=\"form-control\"\n      placeholder=\"Write your text here\"\n      bind:value={content} />\n  </fieldset>\n\n  <button\n    class=\"btn btn-sm pull-xs-right btn-info\"\n    disabled={!content || inProgress}>\n    Publish\n  </button>\n\n</form>\n\n<p class=\"text-danger\">{error}</p>\n",
    "<script>\n  export let selectTab;\n  export let curRoute;\n  export let routes;\n  export let path;\n  let url = window.location.origin + path;\n  let name = routes[path].name;\n\n  function redirectTo(event) {\n    // change current router path\n    selectTab(event.target);\n    const path = event.target.pathname;\n    curRoute.set(path);\n\n    // push the path into web browser history API\n    window.history.pushState({ path }, \"\", url);\n  }\n</script>\n\n<style>\n  a {\n    text-transform: uppercase;\n    text-decoration: underline;\n    padding: 1rem;\n  }\n</style>\n\n<li>\n  <a href={path} on:click|preventDefault={redirectTo}>{name}</a>\n</li>\n",
    "<script>\n  export let post;\n  export let session;\n\n  import { ensureObject } from \"../utils\";\n  import Publish from \"./Publish.svelte\";\n  import PostContent from \"./Post/Content.svelte\";\n  import Collection from \"./Collection.svelte\";\n\n  let pgi = pubgate_instance;\n  let showPublish = false;\n\n  const togglePublish = ev => {\n    ev.preventDefault();\n    showPublish = !showPublish;\n  };\n\n  const toggleLists = ev => {\n    ev.preventDefault();\n  };\n\n  let liked;\n  let announced;\n  if ($session.user) {\n    if (post.reactions) {\n      if (post.reactions.Like) {\n        if (post.reactions.Like[$session.user.name]) {\n          liked = true;\n        }\n      }\n    }\n\n    if (post.reactions) {\n      if (post.reactions.Announce) {\n        if (post.reactions.Announce[$session.user.name]) {\n          announced = true;\n        }\n      }\n    }\n  }\n\n  let inReply;\n  let isReply = false;\n\n  const getCount = async (item, returnAll = false) => {\n    if (!item) return \"n/a\";\n    const data = typeof item === \"string\" ? await fetchItem(item) : item;\n    return returnAll ? data : data.totalItems;\n  };\n\n  const fetchItem = path => {\n    let headers = { Accept: \"application/activity+json\" };\n    const url = pgi ? path + \"?cached=1\" : path;\n    return fetch(url, { headers })\n      .then(d => d.json())\n      .then(d => d);\n  };\n\n  let likes = getCount(post.likes);\n  let comments = getCount(post.replies, true);\n  let announces = getCount(post.shares);\n\n  if (post.inReplyTo) {\n    inReply = pgi ? post.inReplyTo : ensureObject(post.inReplyTo);\n    isReply = true;\n  }\n\n  let customType = isReply ? \"Reply\" : null;\n\n  async function doLike(ev) {\n    ev.preventDefault();\n    if (!liked) {\n      let ap_object = {\n        type: \"Like\",\n        object: post.id,\n        cc: [post.attributedTo],\n      };\n      const response = await fetch($session.user.outbox, {\n        method: \"POST\",\n        body: JSON.stringify(ap_object),\n        headers: {\n          Authorization: \"Bearer \" + $session.token,\n        },\n      }).then(d => d.json());\n      liked = true;\n    }\n  }\n\n  async function doAnnounce(ev) {\n    ev.preventDefault();\n    if (!announced) {\n      let ap_object = {\n        type: \"Announce\",\n        object: post.id,\n        cc: [post.attributedTo],\n      };\n      const response = await fetch($session.user.outbox, {\n        method: \"POST\",\n        body: JSON.stringify(ap_object),\n        headers: {\n          Authorization: \"Bearer \" + $session.token,\n        },\n      }).then(d => d.json());\n      announced = true;\n    }\n  }\n</script>\n\n<style>\n  .reactionz {\n    font-size: 18px;\n  }\n  .rs {\n    border-bottom: 1px solid #dadde1;\n    display: flex;\n  }\n  .ra {\n    padding: 4px 0;\n    display: flex;\n  }\n\n  .rs_left {\n    flex-grow: 1;\n  }\n  .rs_right {\n    margin-left: 7px;\n  }\n  .ra_item {\n    flex: 1 0;\n    align-items: center;\n    color: #606770;\n    display: flex;\n    font-weight: 600;\n    height: 32px;\n    justify-content: center;\n  }\n\n  .reaction {\n    margin-left: 30px;\n  }\n  button {\n    border: none;\n    background: none;\n  }\n\n  .comments {\n    margin-bottom: 15px;\n    padding-left: 15px;\n    border-left: 3px solid #ff0;\n  }\n</style>\n\n{#if isReply == true}\n  <div class=\"reaction\">\n    {#if typeof inReply === 'object' && typeof inReply.id != 'string'}\n      {#await inReply then value}\n        <PostContent post={value} />\n      {/await}\n    {/if}\n  </div>\n{/if}\n\n<PostContent {post} {customType} />\n\n<div class=\"reactionz\">\n  <div class=\"rs\">\n    {#await likes then likes}\n      <span class=\"rs_left\" on:click={toggleLists}>{likes} likes</span>\n    {/await}\n    {#await comments then comments}\n      <span class=\"rs_right\" on:click={toggleLists}>\n        {comments.totalItems !== null ? comments.totalItems : comments} comments\n      </span>\n    {/await}\n    {#await announces then announces}\n      <span class=\"rs_right\" on:click={toggleLists}>{announces} announces</span>\n    {/await}\n  </div>\n  {#if $session.user}\n    <div class=\"ra\">\n      <button class=\"ra_item\">\n        Like{#if liked}d{/if}\n      </button>\n      <button class=\"ra_item\" on:click={togglePublish}>Add comment</button>\n      <button class=\"ra_item\" on:click={doAnnounce}>\n        Announce{#if announced}d{/if}\n      </button>\n    </div>\n    {#if showPublish}\n      <Publish reply={post} {session} />\n    {/if}\n  {/if}\n  {#await comments then collection}\n    {#if collection.totalItems}\n      <div class=\"comments\">\n        <Collection {session} {collection} />\n      </div>\n    {/if}\n  {/await}\n</div>\n",
    "<script>\n  import Post from \"./Post.svelte\";\n  import Header from \"./Post/Header.svelte\";\n  import { xhr, ensureObject } from \"../utils\";\n\n  export let post;\n  export let session;\n\n  let pgi = pubgate_instance;\n  let postObject;\n  let isReaction = false;\n\n  if ([\"Announce\", \"Like\"].includes(post.type) || post.object.inReplyTo) {\n    postObject = pgi ? post.object : ensureObject(post.object);\n    isReaction = true;\n  }\n</script>\n\n<style>\n  .reaction {\n    margin-left: 30px;\n  }\n</style>\n\n<li class=\"post\">\n  {#if isReaction == false}\n    <Post post={post.object} {session} />\n  {:else}\n    <Header {post} />\n    <div class=\"reaction\">\n      <Post post={postObject} {session} />\n    </div>\n  {/if}\n</li>\n",
    "<script>\n  import Header from \"./Header.svelte\";\n  import Tags from \"./Tags.svelte\";\n\n  export let post;\n  export let customType;\n  if (customType) post.type = customType;\n</script>\n\n<style>\n  .original {\n    font-size: 0.75em;\n  }\n</style>\n\n{#if post.id}\n  <Header {post} />\n  {#if post.tag}\n    <Tags tags={post.tag} />\n  {/if}\n\n  <p>\n    {@html post.content}\n  </p>\n  {#if post.attachment}\n    {#each post.attachment as attachment}\n      {#if attachment.type === 'Document' && attachment.mediaType.startsWith('image')}\n        <img src={attachment.url} alt=\"image\" />\n      {/if}\n    {/each}\n  {/if}\n{:else}\n  <a class=\"original\" href={post}>Original post</a>\n{/if}\n"
  ],
  "names": [],
  "mappings": "AAqCc,CAAC,AACb,CAAC;ACoCD,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC;ACxDD,CAAC,cAAC,CAAC,AACD,cAAc,CAAE,SAAS,CACzB,eAAe,CAAE,SAAS,CAC1B,OAAO,CAAE,IAAI,AACf,CAAC;ACqFD,UAAU,cAAC,CAAC,AACV,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,OAAO,CAAE,IAAI,AACf,CAAC,AACD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,GAAG,CAAC,CAAC,CACd,OAAO,CAAE,IAAI,AACf,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,CAAC,AACd,CAAC,AACD,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,IAAI,CAAE,CAAC,CAAC,CAAC,CACT,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,aAAa,CAAE,IAAI,CACnB,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC7B,CAAC;AClID,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,IAAI,AACnB,CAAC;ACXD,SAAS,cAAC,CAAC,AACT,SAAS,CAAE,MAAM,AACnB,CAAC"
}