{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/Publish.svelte",
    "../src/components/Activity.svelte",
    "../src/components/Link.svelte",
    "../src/components/Post.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { getCreateObject, getHashTag } from \"../utils/pubGate\";\n\n  export let reply = null;\n  export let session;\n  export let curRoute;\n\n  let inProgress = false;\n  let content = \"\";\n\n  const hashTagMatcher = /(^|\\W)(#[a-z\\d][\\w-]*)/gi;\n\n  const wrapHashTagsWithLink = text =>\n    text.match(hashTagMatcher)\n      ? text.replace(hashTagMatcher, '$1<a href=\"\" rel=\"tag\">$2</a>')\n      : text;\n\n  const getAllHashTags = text => text.match(hashTagMatcher) || [];\n\n  const publish = async ev => {\n    ev.preventDefault();\n\n    inProgress = true;\n    let tags = getAllHashTags(content)\n      .map(v => v.trim())\n      .map(getHashTag);\n\n    const data = wrapHashTagsWithLink(content);\n\n    let ap_object = getCreateObject(data, tags);\n\n    if (reply) {\n      ap_object.object.inReplyTo = reply.id;\n      ap_object.cc = [reply.attributedTo];\n    }\n\n    try {\n      const response = await fetch($session.user.outbox, {\n        method: \"POST\",\n        body: JSON.stringify(ap_object),\n        headers: { Authorization: \"Bearer \" + $session.token },\n      });\n      const data = await response.json();\n    } catch (e) {\n      console.log(e);\n    }\n\n    inProgress = false;\n    content = \"\";\n  };\n</script>\n\n<style>\n  textarea {\n    width: 100%;\n  }\n</style>\n\n<form on:submit={publish}>\n\n  <fieldset class=\"form-group\">\n    <textarea\n      class=\"form-control\"\n      placeholder=\"Write your text here\"\n      bind:value={content} />\n  </fieldset>\n\n  <button\n    class=\"btn btn-sm pull-xs-right btn-info\"\n    disabled={!content || inProgress}>\n    Publish\n  </button>\n\n</form>\n",
    "<script>\n  export let post;\n  export let session;\n  import Post from \"./Post.svelte\";\n  import { xhr, ensureObject } from \"../utils\";\n\n  let pgi = pubgate_instance;\n  let postObject;\n  let isReaction = false;\n\n  if ([\"Announce\", \"Like\"].includes(post.type)) {\n     postObject = pgi\n      ? post.object\n      : ensureObject(post.object);\n    isReaction = true;\n  }\n</script>\n\n<style>\n  .reaction {\n    margin-left: 30px;\n  }\n</style>\n\n<li class=\"post\">\n  {#if isReaction == false}\n    <h2 id=\"\">.</h2>\n    <Post post={post.object} {session} />\n  {:else}\n    <div class=\"metadata\">\n      <h2 id=\"\">.</h2>\n      <a href={post.id}>{post.type}</a>\n      by user\n      <a href={post.actor}>{post.actor}</a>\n      <span class=\"metadata-seperator\">Â·</span>\n\n      {#if post.published}\n        <span>{post.published.replace('T', ' ').replace('Z', ' ')}</span>\n      {/if}\n    </div>\n    <div class=\"reaction\">\n      <Post post={postObject} {session} />\n    </div>\n  {/if}\n</li>\n",
    "<script>\n  export let selectTab;\n  export let curRoute;\n  export let routes;\n  export let path;\n  let url = window.location.origin + path;\n  let name = routes[path].name;\n\n  function redirectTo(event) {\n    // change current router path\n    selectTab(event.target);\n    const path = event.target.pathname;\n    curRoute.set(path);\n\n    // push the path into web browser history API\n    window.history.pushState({ path }, \"\", url);\n  }\n</script>\n\n<style>\n  a {\n    text-transform: uppercase;\n    text-decoration: underline;\n    padding: 1rem;\n  }\n</style>\n\n<li>\n  <a href={path} on:click|preventDefault={redirectTo}>{name}</a>\n</li>\n",
    "<script>\n  export let post;\n  export let session;\n\n  import { ensureObject } from \"../utils\";\n  import Publish from \"./Publish.svelte\";\n  import PostContent from \"./PostContent.svelte\";\n\n  let pgi = pubgate_instance;\n  let showPublish = false;\n  const togglePublish = ev => {\n    ev.preventDefault();\n    showPublish = !showPublish;\n  };\n\n  const toggleLists = ev => {\n    ev.preventDefault();\n  };\n\n  let liked;\n  let announced;\n  if ($session.user) {\n    if (post.reactions) {\n      if (post.reactions.Like) {\n        if (post.reactions.Like[$session.user.name]) {\n          liked = true;\n        }\n      }\n    }\n\n    if (post.reactions) {\n      if (post.reactions.Announce) {\n        if (post.reactions.Announce[$session.user.name]) {\n          announced = true;\n        }\n      }\n    }\n  }\n\n  let inReply;\n  let isReply = false;\n\n  let likes = \"n/a\";\n  let comments = \"n/a\";\n  let announces = \"n/a\";\n\n  if (post.inReplyTo) {\n    inReply = pgi\n      ? post.inReplyTo\n      : ensureObject(post.inReplyTo);\n    isReply = true;\n  }\n\n  if (post.likes) {\n    likes = post.likes.totalItems;\n  }\n\n  if (post.shares) {\n    announces = post.shares.totalItems;\n  }\n\n  if (post.replies) {\n    comments = post.replies.totalItems;\n  }\n\n  let customType = isReply ? \"Reply\" : null;\n\n  async function doLike(ev) {\n    ev.preventDefault();\n    if (!liked) {\n      let ap_object = {\n        type: \"Like\",\n        object: post.id,\n        cc: [post.attributedTo],\n      };\n      const response = await fetch($session.user.outbox, {\n        method: \"POST\",\n        body: JSON.stringify(ap_object),\n        headers: {\n          Authorization: \"Bearer \" + $session.token,\n        },\n      }).then(d => d.json());\n      liked = true;\n    }\n  }\n\n  async function doAnnounce(ev) {\n    ev.preventDefault();\n    if (!announced) {\n      let ap_object = {\n        type: \"Announce\",\n        object: post.id,\n        cc: [post.attributedTo],\n      };\n      const response = await fetch($session.user.outbox, {\n        method: \"POST\",\n        body: JSON.stringify(ap_object),\n        headers: {\n          Authorization: \"Bearer \" + $session.token,\n        },\n      }).then(d => d.json());\n      announced = true;\n    }\n  }\n</script>\n\n<style>\n  .reactionz {\n    font-size: 18px;\n  }\n  .rs {\n    border-bottom: 1px solid #dadde1;\n    display: flex;\n  }\n  .ra {\n    padding: 4px 0;\n    display: flex;\n  }\n\n  .rs_left {\n    flex-grow: 1;\n  }\n  .rs_right {\n    margin-left: 7px;\n  }\n  .ra_item {\n    flex: 1 0;\n    align-items: center;\n    color: #606770;\n    display: flex;\n    font-weight: 600;\n    height: 32px;\n    justify-content: center;\n  }\n\n  .reaction {\n    margin-left: 30px;\n  }\n  button {\n    border: none;\n    background: none;\n  }\n</style>\n\n{#if isReply == true}\n  <div class=\"reaction\">\n    {#if typeof inReply === 'object' && typeof inReply.id != 'string'}\n      {#await inReply then value}\n        <PostContent post={value} />\n      {/await}\n    {:else}\n      <PostContent post={inReply} />\n    {/if}\n  </div>\n{/if}\n\n<PostContent {post} {customType} />\n\n<div class=\"reactionz\">\n  <div class=\"rs\">\n    <span class=\"rs_left\" on:click={toggleLists}>{likes} likes</span>\n    <span class=\"rs_right\" on:click={toggleLists}>{comments} comments</span>\n    <span class=\"rs_right\" on:click={toggleLists}>{announces} announces</span>\n  </div>\n  {#if $session.user}\n    <div class=\"ra\">\n      <button class=\"ra_item\">\n        Like{#if liked}d{/if}\n      </button>\n      <button class=\"ra_item\" on:click={togglePublish}>Add comment</button>\n      <button class=\"ra_item\" on:click={doAnnounce}>\n        Announce{#if announced}d{/if}\n      </button>\n    </div>\n    {#if showPublish}\n      <Publish reply={post} {session} />\n    {/if}\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAqDE,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC;ACpCD,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,IAAI,AACnB,CAAC;ACDD,CAAC,cAAC,CAAC,AACD,cAAc,CAAE,SAAS,CACzB,eAAe,CAAE,SAAS,CAC1B,OAAO,CAAE,IAAI,AACf,CAAC;ACmFD,UAAU,cAAC,CAAC,AACV,SAAS,CAAE,IAAI,AACjB,CAAC,AACD,GAAG,cAAC,CAAC,AACH,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,OAAO,CAAE,IAAI,AACf,CAAC,AACD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,GAAG,CAAC,CAAC,CACd,OAAO,CAAE,IAAI,AACf,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,CAAC,AACd,CAAC,AACD,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,IAAI,CAAE,CAAC,CAAC,CAAC,CACT,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,MAAM,AACzB,CAAC,AAED,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,IAAI,AACnB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,AAClB,CAAC"
}