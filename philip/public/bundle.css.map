{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/components/Publish.svelte",
    "../src/components/Search.svelte",
    "../src/components/Post.svelte",
    "../src/components/Page/Link.svelte",
    "../src/components/Activity.svelte",
    "../src/components/Post/Content.svelte",
    "../src/components/Post/Overlay.svelte",
    "../src/components/Post/UserLink.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { getCreateObject, getHashTag, getMention } from \"../utils/pubGate\";\n  import { getUserId, publishPost } from \"../utils\";\n\n  export let reply = null;\n  export let session;\n  export let curRoute;\n\n  let inProgress = false;\n  let content = \"\";\n  let error = \"\";\n\n  const hashTagMatcher = /(^|\\W)(#[^#\\s]+)/gi;\n  const mentionMatcher = /(^|\\W)@([^@\\s]+)(@([^@\\s]+))?/gi;\n\n  const wrapHashTagsWithLink = text =>\n    text.replace(hashTagMatcher, '$1<a href=\"\" rel=\"tag\">$2</a>');\n\n  const getAllHashTags = text => text.match(hashTagMatcher) || [];\n  const getAllMentions = text => [...text.matchAll(mentionMatcher)] || [];\n\n  const wrapLinksWithTags = text =>\n    text.replace(/( https?:\\/\\/([^\\s]+))/gi, '<a href=\"$1\">$2</a>');\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n    inProgress = true;\n\n    const tags = getAllHashTags(content)\n      .map(v => v.trim())\n      .map(getHashTag);\n    content = wrapHashTagsWithLink(wrapLinksWithTags(content));\n\n    // parse and replace mentions\n    const mentions = getAllMentions(content).map(m => {\n      const orig = m[0];\n      const name = m[2];\n      const domain = m[4];\n      const id = getUserId(name, domain);\n      const wrapped = `${m[1]}<span class='h-card'><a href=\"${id}\"' class='u-url mention'>@<span>${name}</span></a></span>`;\n      content = content.replace(orig, wrapped);\n      return getMention(name, id);\n    });\n    let ap_object = getCreateObject(content, tags.concat(mentions));\n    ap_object.cc = mentions.map(m => m.href);\n\n    if (reply) {\n      ap_object.object.inReplyTo = reply.id;\n      if (reply.attributedTo !== $session.user.url) {\n        ap_object.cc = ap_object.cc.concat(reply.attributedTo);\n      }\n    }\n    const body = JSON.stringify(ap_object);\n    const res = await outboxPost($session, body);\n    if (res.error) error = res.error;\n    else if (res.Created !== \"success\")\n      error = \"Failed to create post: \" + JSON.stringify(res);\n    else {\n      // TODO change route to show post?\n      content = \"\";\n    }\n    inProgress = false;\n  };\n</script>\n\n<style>\n  textarea {\n    width: 100%;\n  }\n</style>\n\n<form on:submit={handleSubmit}>\n\n  <fieldset class=\"form-group\">\n    <textarea\n      class=\"form-control\"\n      placeholder=\"Write your text here\"\n      bind:value={content} />\n  </fieldset>\n\n  <button\n    class=\"btn btn-sm pull-xs-right btn-info\"\n    disabled={!content || inProgress}>\n    Publish\n  </button>\n\n</form>\n\n<p class=\"text-danger\">{error}</p>\n",
    "<script>\n  export let session;\n  export let curRoute;\n\n  import { findUser, fetchOutbox, findPost, followUser } from \"../utils\";\n  import Collection from \"./Collection.svelte\";\n  import Post from \"./Post.svelte\";\n\n  // search user\n  let username = \"\";\n  let profile = null;\n  let following = false;\n  let outbox_collection = null;\n\n  // search post\n  let loadedPost = \"\";\n  let postLink = \"\";\n  let errorUser = \"\";\n  let errorPost = \"\";\n  let errorFollow = \"\";\n\n  const handleSearchUser = async event => {\n    errorUser = \"\";\n    profile = null;\n    outbox_collection = null;\n    let name, domain, url;\n\n    const pair = username.split(\"@\");\n    if (username.match(/^http/) || pair.length !== 2 || pair[0] === \"\") {\n      return (errorUser = \"Use this format: username@domain\");\n    }\n    name = pair[0];\n    domain = pair[1];\n\n    const result = await findUser(name, domain);\n    if (!result) errorUser = \"Empty response.\";\n    else if (result.error) errorUser = result.error;\n    if (!result.outbox) {\n      errorUser = result.error || \"User not found.\";\n      return;\n    }\n    profile = result;\n    errorFollow = \"\";\n\n    outbox_collection =\n      typeof profile.outbox === \"string\"\n        ? await fetchOutbox(profile.outbox)\n        : profile.outbox;\n  };\n\n  const handleSearchPost = async event => {\n    if (postLink === \"\" || !postLink.match(\"^http\")) {\n      errorPost = \"Not an URL.\";\n      return;\n    }\n    errorPost = loadedPost = \"\";\n    const result = await findPost(postLink);\n    if (!result) errorPost = \"Empty response.\";\n    else if (result.error) {\n      errorPost = result.error;\n      return;\n    }\n    loadedPost = result;\n    postLink = \"\";\n  };\n\n  const handleFollow = async event => {\n    if (!$session.user) {\n      errorFollow = \"You are not logged in.\";\n      return;\n    }\n\n    const type = event.target.innerText;\n    const { id, name } = profile;\n    const body = JSON.stringify({ type, object: id });\n\n    const res = await followUser($session, body);\n    if (!res) errorFollow = `Empty response trying to ${type} ${name}`;\n    else if (res.Created === \"success\")\n      following = type === \"Follow\" ? true : false;\n    else if (res.error)\n      if (res.error === \"This user is already followed\") following = true;\n      else errorFollow = JSON.stringify(res.error);\n    else errorFollow = \"Something went wrong.\";\n  };\n</script>\n\n<style>\n  .error {\n    margin-left: 10px;\n    font-size: 15px;\n  }\n</style>\n\n<br />\nSearch accounts\n<form on:submit|preventDefault={handleSearchUser}>\n  <fieldset class=\"form-group\">\n    <input\n      class=\"form-control form-control-lg\"\n      type=\"text\"\n      placeholder=\"Format: username@domain\"\n      bind:value={username} />\n  </fieldset>\n  <button\n    class=\"btn btn-sm pull-xs-right btn-info\"\n    type=\"submit\"\n    disabled={!username}>\n    Find User\n  </button>\n  <span class=\"error text-danger\">{errorUser}</span>\n</form>\n<br />\n<br />\nLoad Post by link\n<form on:submit|preventDefault={handleSearchPost}>\n  <fieldset class=\"form-group\">\n    <input\n      class=\"form-control form-control-lg\"\n      type=\"text\"\n      placeholder=\"Enter a link here\"\n      bind:value={postLink} />\n  </fieldset>\n  <button\n    class=\"btn btn-sm pull-xs-right btn-info\"\n    type=\"submit\"\n    disabled={!postLink}>\n    Find Post\n  </button>\n  <span class=\"error text-danger\">{errorPost}</span>\n</form>\n<br />\n<br />\n\n{#if profile}\n  <h2>\n    {profile.name}\n    <button class=\"btn btn-sm pull-xs-right btn-info\" on:click={handleFollow}>\n      {#if following}Unfollow{:else}Follow{/if}\n    </button>\n    <span class=\"error text-danger\">{errorFollow}</span>\n  </h2>\n  {profile.summary}\n  {#if outbox_collection}\n    <Collection {session} collection={outbox_collection} />\n  {/if}\n{/if}\n\n{#if typeof loadedPost === 'object'}\n  <Post post={loadedPost} {session} />\n{/if}\n",
    "<script>\n  export let post, session, showComments;\n\n  import PostContent from \"./Post/Content.svelte\";\n  import Header from \"./Post/Header.svelte\";\n  import Tags from \"./Post/Tags.svelte\";\n  import Overlay from \"./Post/Overlay.svelte\";\n  import Collection from \"./Collection.svelte\";\n  import Publish from \"./Publish.svelte\";\n\n  import { fetchJSON, outboxPost } from \"../utils\";\n\n  let pgi = pubgate_instance;\n  let showPublish = false;\n  let content = \"replies\";\n\n  let inReply;\n  let isReply = false;\n\n  let isID = typeof post === \"string\";\n  // let skip_comments;\n  // if (!isID && post.type.startsWith(\"To\")) skip_comments = true;\n  let tags = post.tag;\n\n  const togglePublish = ev => {\n    ev.preventDefault();\n    showPublish = !showPublish;\n  };\n  const toggleShowComments = ev => {\n    ev.preventDefault();\n    showComments = !showComments;\n  };\n\n  const getReactions = async item => {\n    if (!item) return \"n/a\";\n    const data = typeof item === \"string\" && !pgi ? await fetchJSON(item) : item;\n    // TODO only fetch on hover?\n    // Should be in cache with backend caching. With FE-caching, IDK\n\n    // TODO mastodon returns first as string: totalItems is higher level than first\n    // Not critical with BE caching\n    if (typeof data.first === \"string\") console.log(\"first is string\", data);\n\n    return data;\n  };\n\n  let likes = getReactions(post.likes);\n  let comments = getReactions(post.replies);\n  let announces = getReactions(post.shares);\n\n  let liked;\n  let announced;\n  if ($session.user && post.reactions) {\n    if (post.reactions.Like) {\n      if (post.reactions.Like[$session.user.name]) liked = true;\n    } else if (post.reactions.Announce) {\n      if (post.reactions.Announce[$session.user.name]) announced = true;\n    }\n  }\n\n  const headers = { Authorization: \"Bearer \" + $session.token };\n\n  // TODO is it possible to pass type (Like or Announce) and catch event to combine functions?\n  // Yes\n  const doLike = async ev => {\n    ev.preventDefault();\n    if (liked) return;\n    const object = post.id;\n    const cc = [post.attributedTo];\n    const body = JSON.stringify({ type: \"Like\", object, cc });\n    const res = await outboxPost($session, body);\n    liked = true;\n  };\n\n  const doAnnounce = async ev => {\n    ev.preventDefault();\n    if (announced) return;\n    const object = post.id;\n    const cc = [post.attributedTo];\n    const body = JSON.stringify({ type: \"Announce\", object, cc });\n    const res = await outboxPost($session, body);\n    announced = true;\n  };\n</script>\n\n<style>\n  .rs {\n    border-bottom: 1px solid #dadde1;\n    display: flex;\n  }\n  .ra {\n    padding: 4px 0;\n    display: flex;\n  }\n\n  .rs_left {\n    flex-grow: 1;\n  }\n  .rs_right {\n    margin-left: 7px;\n  }\n  .ra_item {\n    flex: 1 0;\n    align-items: center;\n    color: #606770;\n    display: flex;\n    font-weight: 600;\n    height: 32px;\n    justify-content: center;\n  }\n  button {\n    border: none;\n    background: none;\n  }\n  .comments {\n    padding-left: 15px;\n    border-left: 3px solid #ff0;\n  }\n</style>\n\n{#if isID}\n  <a href={post}>{post}</a>\n{:else}\n  <Header {post} />\n  <Tags {tags} />\n  <PostContent {post} />\n  <div>\n    <div class=\"rs\">\n      {#await likes then likes}\n        <span class=\"rs_left\">\n          <Overlay label={`${likes.totalItems} likes`} data={likes.first} />\n        </span>\n      {/await}\n      {#await comments then comments}\n        <span class=\"rs_right\" on:click={toggleShowComments}>\n          {comments.totalItems} comments\n        </span>\n      {/await}\n      {#await announces then announces}\n        <span class=\"rs_right\">\n          <Overlay\n            label={`${announces.totalItems} announces`}\n            data={announces.first} />\n        </span>\n      {/await}\n    </div>\n    {#if $session.user}\n      <div class=\"ra\">\n        <button class=\"btn btn-dark ra_item\" on:click={doLike}>\n          Like\n          {#if liked}d{/if}\n        </button>\n        <button class=\"btn btn-dark ra_item\" on:click={togglePublish}>\n          Add comment\n        </button>\n        <button class=\"btn btn-dark ra_item\" on:click={doAnnounce}>\n          Announce\n          {#if announced}d{/if}\n        </button>\n      </div>\n      {#if showPublish}\n        <Publish reply={post} {session} />\n      {/if}\n    {/if}\n    {#if showComments}\n      {#await comments then collection}\n        {#if collection.totalItems}\n          <div class=\"comments\">\n            <Collection {collection} {session} {content} />\n          </div>\n        {/if}\n      {/await}\n    {/if}\n  </div>\n{/if}\n",
    "<script>\n  export let selectTab;\n  export let curRoute;\n  export let routes;\n  export let path;\n  let url = window.location.origin + path;\n  let name = routes[path].name;\n\n  function redirectTo(event) {\n    // change current router path\n    selectTab(event.target);\n    const path = event.target.pathname;\n    curRoute.set(path);\n\n    // push the path into web browser history API\n    window.history.pushState({ path }, \"\", url);\n  }\n</script>\n\n<style>\n  a {\n    text-transform: uppercase;\n    text-decoration: underline;\n    padding: 1rem;\n  }\n</style>\n\n<li>\n  <a href={path} on:click|preventDefault={redirectTo}>{name}</a>\n</li>\n",
    "<script>\n  import Post from \"./Post.svelte\";\n  import Header from \"./Post/Header.svelte\";\n  import { ensureObject } from \"../utils\";\n\n  export let post, session, content;\n\n  let pgi = pubgate_instance;\n  let postObject, isReply, isReaction;\n\n  if (content == \"replies\") {\n    post.object.type = \"Reply\";\n  } else if (\n    [\"Announce\", \"Like\"].includes(post.type) ||\n    post.object.inReplyTo\n  ) {\n    postObject = pgi ? post.object : ensureObject(post.object);\n\n    if ([\"Announce\", \"Like\"].includes(post.type)) {\n      isReaction = true;\n    } else if (postObject.inReplyTo) {\n      isReply = true;\n      postObject.type = \"Reply\";\n      if (typeof postObject.inReplyTo !== \"string\") {\n        postObject.inReplyTo.type = \"To \" + postObject.inReplyTo.type;\n      }\n    }\n  }\n  let showComments = true;\n  let notShowComments = false\n</script>\n\n<style>\n  .reaction {\n    margin-left: 30px;\n  }\n</style>\n\n<li class=\"post\">\n  {#if content == 'replies'}\n    <div class=\"reaction\">\n      <Post post={post.object} {session} showComments={showComments} />\n    </div>\n  {:else}\n    <h2 id=\"\">.</h2>\n    {#if isReaction}\n      <Header {post} />\n      <div class=\"reaction\">\n        <Post post={postObject} {session} showComments={notShowComments} />\n      </div>\n    {:else if isReply}\n      <Post post={postObject} {session} showComments={notShowComments} />\n      <div class=\"reaction\">\n        <Post post={postObject.inReplyTo} {session} showComments={notShowComments} />\n      </div>\n    {:else}\n      <Post post={post.object} {session} showComments={showComments} />\n    {/if}\n  {/if}\n</li>\n",
    "<script>\n  export let post;\n</script>\n\n<style>\n  .original {\n    font-size: 0.75em;\n  }\n</style>\n\n{#if post.id}\n  <p>\n    {@html post.content}\n  </p>\n  {#if post.attachment}\n    {#each post.attachment as attachment}\n      {#if attachment.type === 'Document' && attachment.mediaType.startsWith('image')}\n        <img src={attachment.url} alt=\"image\" />\n      {/if}\n    {/each}\n  {/if}\n{:else}\n  <a class=\"original\" href={post}>Original post</a>\n{/if}\n",
    "<script>\n  import UserLink from \"./UserLink.svelte\";\n\n  export let label;\n  export let data;\n\n  let items = [];\n  let avatar;\n\n  if (data) {\n    //console.debug(\"rendering overlay\", label, data);\n    items = data.first ? data.first.orderedItems : data.orderedItems;\n  }\n</script>\n\n<style>\n  .overlay {\n    -font: 3em;\n  }\n  .reaction-tooltip {\n    display: none;\n  }\n  .overlay:hover .reaction-tooltip {\n    display: block;\n    position: absolute;\n    -top: 100px;\n    -bottom: 100px;\n    border: solid 1px black;\n  }\n</style>\n\n<div class=\"overlay\">\n  {label}\n  {#if items.length}\n    <div class=\"reaction-tooltip\">\n      {#each items as item}\n        <UserLink id={item.actor} />\n      {/each}\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  // import { fetchJSON } from \"../utils\";\n\n  const defaultIcon = \"favicon.png\";\n\n  const getName = id => {\n    // Will fail with user ids, which are not FollowYouNoseFormat\n    // Could be fetched on hover at same time as avatar\n\n    const name = id.match(/@([^\\/]+)$/);\n    return name ? name[1] : id;\n  };\n\n  const getAvatar = async id => {\n    // Should be performed on hover, not on page load\n\n    // const user = await fetchJSON(id);\n    // console.log(\"icon\", user.icon, defaultIcon);\n    // return user.icon.url !== \"\" ? user.icon.url : defaultIcon;\n\n    return defaultIcon\n  };\n\n  export let id;\n  const name = getName(id);\n  const avatar = getAvatar(id);\n</script>\n\n<style>\n  div {\n    float: left;\n    text-align: center;\n    background-color: #fff;\n    padding: 20px;\n  }\n  img {\n    display: block;\n    height: 50px;\n  }\n</style>\n\n<div>\n  <a href={id}>{name}</a>\n  {#await avatar then url}\n    <img src={url} alt=\"avatar\" />\n  {/await}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAkEE,QAAQ,eAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC;ACoBD,MAAM,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,IAAI,AACjB,CAAC;ACLD,GAAG,cAAC,CAAC,AACH,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,OAAO,CAAE,IAAI,AACf,CAAC,AACD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,GAAG,CAAC,CAAC,CACd,OAAO,CAAE,IAAI,AACf,CAAC,AAED,QAAQ,cAAC,CAAC,AACR,SAAS,CAAE,CAAC,AACd,CAAC,AACD,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,GAAG,AAClB,CAAC,AACD,QAAQ,cAAC,CAAC,AACR,IAAI,CAAE,CAAC,CAAC,CAAC,CACT,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAChB,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,MAAM,AACzB,CAAC,AACD,MAAM,cAAC,CAAC,AACN,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,AAClB,CAAC,AACD,SAAS,cAAC,CAAC,AACT,YAAY,CAAE,IAAI,CAClB,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AAC7B,CAAC;ACjGD,CAAC,cAAC,CAAC,AACD,cAAc,CAAE,SAAS,CACzB,eAAe,CAAE,SAAS,CAC1B,OAAO,CAAE,IAAI,AACf,CAAC;ACSD,SAAS,cAAC,CAAC,AACT,WAAW,CAAE,IAAI,AACnB,CAAC;AC9BD,SAAS,cAAC,CAAC,AACT,SAAS,CAAE,MAAM,AACnB,CAAC;ACSD,QAAQ,cAAC,CAAC,AACR,KAAK,CAAE,GAAG,AACZ,CAAC,AACD,iBAAiB,cAAC,CAAC,AACjB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,sBAAQ,MAAM,CAAC,iBAAiB,cAAC,CAAC,AAChC,OAAO,CAAE,KAAK,CACd,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,KAAK,CACX,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,KAAK,AACzB,CAAC;ACCD,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,MAAM,CAClB,gBAAgB,CAAE,IAAI,CACtB,OAAO,CAAE,IAAI,AACf,CAAC,AACD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,IAAI,AACd,CAAC"
}